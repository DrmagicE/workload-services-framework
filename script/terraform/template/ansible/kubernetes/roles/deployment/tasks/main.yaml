
- name: create name space
  command: "kubectl create namespace {{ wl_namespace }}"

- name: Create ImagePullSecret
  include_role:
    name: docker_auth

- name: create deployment
  command: "kubectl create --namespace {{ wl_namespace }} -f /tmp/{{ wl_namespace }}-{{ wl_kubernetes_yaml }}"

- block:
  
    - name: wait for scheduling
      shell: "timeout {{ wl_timeout[1] }}s bash -c 'until kubectl --namespace={{ wl_namespace }} wait pod --all --for=condition=Ready --field-selector=status.phase!=Succeeded --timeout=1s 1>/dev/null 2>&1; do if kubectl --namespace={{ wl_namespace }} get pod -o json | grep -q Unschedulable; then exit 1; fi; done; exit 0'"

  rescue:

    - name: debugging
      include_role: 
        name: debug

    - name: abort
      fail:
        msg: "abort due to scheduling failure"

- name: get benchmark pods
  shell: "kubectl get --namespace={{ wl_namespace }} pod --selector={{ wl_job_filter[0] }}={{ wl_job_filter[1] }} '-o=jsonpath={.items[*].metadata.name}' | tr ' ' '\n'"
  register: pods

- name: invoke trace
  include_role:
    name: trace
    tasks_from: start
  vars:
    pods_str: "{{ pods.stdout_lines | join(' ') }}"
  when: wl_trace_modules is defined

- block:

    - name: get benchmark pods
      shell: "kubectl get --namespace={{ wl_namespace }} pod --selector={{ wl_job_filter[0] }}={{ wl_job_filter[1] }} '-o=jsonpath={.items[*].metadata.name}' | tr ' ' '\n'"
      register: pods

    - name: wait for execution complete
      command: "timeout {{ wl_timeout[0] }}s kubectl exec --namespace={{ wl_namespace }} {{ item }} -c {{ wl_job_filter[1] }} -- sh -c 'cat /export-logs > /tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar'"
      with_items: "{{ pods.stdout_lines }}"
      ignore_errors: yes

    - name: get benchmark pods
      shell: "kubectl get --namespace={{ wl_namespace }} pod --selector={{ wl_job_filter[0] }}={{ wl_job_filter[1] }} '-o=jsonpath={.items[*].metadata.name}' | tr ' ' '\n'"
      register: pods

    - name: extract logs
      shell: "kubectl exec --namespace={{ wl_namespace }} -c {{ wl_job_filter[1] }} {{ item }} -- sh -c 'cat /tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar' > /tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar && tar xf /tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar -O > /dev/null"
      register: status
      until: status.rc == 0
      retries: 5
      delay: 5
      with_items: "{{ pods.stdout_lines }}"
      ignore_errors: yes

  always:

    - name: revoke trace
      include_role:
        name: trace
        tasks_from: stop
      when: wl_trace_modules is defined

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules is defined
  ignore_errors: yes

- name: print debug info 
  include_role:
    name: debug

- block:

  - name: delete deployment
    command: "kubectl --namespace={{ wl_namespace }} delete -f /tmp/{{ wl_namespace }}-{{ wl_kubernetes_yaml }} --ignore-not-found=true --grace-period=150 --timeout=5m"
    ignore_errors: yes
    when: ((csp | default('static')) == 'static') or ((itr |int) < (run_stage_iterations | default(1) | int))
      
  - name: get resource types
    shell: "kubectl api-resources --namespaced -o name --no-headers | cut -f1 -d."
    register: resources
    when: ((csp | default('static')) == 'static') or ((itr |int) < (run_stage_iterations | default(1) | int))

  - name: delete resources
    shell: 
      cmd: "kubectl --namespace={{ wl_namespace }} delete {{ resources.stdout_lines | join(',') }} --all --ignore-not-found=true --grace-period=150 --timeout=5m"
      executable: /bin/bash
    ignore_errors: yes
    when: ((csp | default('static')) == 'static') or ((itr |int) < (run_stage_iterations | default(1) | int))
      
  - name: delete namespace
    command: "timeout {{ k8s_delete_namespace_timeout}} kubectl delete namespace {{ wl_namespace }} --grace-period=300 --timeout=10m --wait --ignore-not-found=true"
    register: delns
    until: delns.rc == 0
    retries: 10
    delay: 10
    when: ((csp | default('static')) == 'static') or ((itr |int) < (run_stage_iterations | default(1) | int))

  rescue:

  - name: perform kill namespace workaround
    command: "bash -c 'kubectl replace --raw \"/api/v1/namespaces/{{ wl_namespace }}/finalize\" -f <(kubectl get ns {{ wl_namespace }} -o json | grep -v \"\\\"kubernetes\\\"\")'"
    ignore_errors: yes

- name: create the iteration directory
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ item }}"
    state: directory
  with_items: "{{ pods.stdout_lines }}"
  delegate_to: localhost

- name: copy logs to local
  fetch:
    src: "/tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    dest: "{{ wl_logs_dir }}/itr-{{ itr }}/"
    flat: yes
  with_items: "{{ pods.stdout_lines }}"
  ignore_errors: yes

- name: untar the logs
  unarchive:
    src: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    dest: "{{ wl_logs_dir}}/itr-{{ itr }}/{{ item }}"
  with_items: "{{ pods.stdout_lines }}"
  delegate_to: localhost
  ignore_errors: yes

- name: remove tmp files
  file: 
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    state: absent
  with_items: "{{ pods.stdout_lines }}"
  delegate_to: localhost
  ignore_errors: yes

- name: remove tmp logs files
  file: 
    path: "/tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    state: absent
  with_items: "{{ pods.stdout_lines }}"
  ignore_errors: yes


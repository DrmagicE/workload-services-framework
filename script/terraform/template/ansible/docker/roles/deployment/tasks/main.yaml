
- name: invoke docker run
  shell: "docker run {{ wl_docker_options }} --rm -d {{ wl_docker_image }}"
  register: container

- name: invoke trace
  include_role:
    name: trace
    tasks_from: start
  vars:
    container_id: "{{ container.stdout_lines | first }}"
  when: wl_trace_modules is defined

- name: wait for logs to be ready
  shell: "timeout {{ wl_timeout[0] }}s docker exec {{ container.stdout_lines | first }} cat /export-logs > /tmp/{{ wl_namespace }}-docker-logs.tar && tar xf /tmp/{{ wl_namespace }}-docker-logs.tar -O > /dev/null"

- name: revoke trace
  include_role:
    name: trace
    tasks_from: stop
  when: wl_trace_modules is defined

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules is defined
  ignore_errors: yes

- name: stop the docker container
  command: "docker rm -f {{ container.stdout_lines | first }}"

- name: create the iteration direcctory
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ container.stdout_lines | first }}"
    state: directory
  delegate_to: localhost

- name: copy logs back to the itr directory
  fetch:
    src: "/tmp/{{ wl_namespace }}-docker-logs.tar"
    dest: "{{ wl_logs_dir }}/itr-{{ itr }}/"
    flat: yes

- name: untar the logs
  unarchive:
    src: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-docker-logs.tar"
    dest: "{{ wl_logs_dir}}/itr-{{ itr }}/{{ container.stdout_lines | first }}"
  delegate_to: localhost

- name: remove remote logs
  file:
    path: "/tmp/{{ wl_namespace }}-docker-logs.tar"
    state: absent

- name: remove local logs tarfile
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-docker-logs.tar"
    state: absent
  delegate_to: localhost


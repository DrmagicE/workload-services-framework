apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.DB_SERVICE }}
  labels:
    app: database
spec:
  ports:
  - port: {{ .Values.DB_PORT }}
    protocol: TCP
  selector:
    app: database

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  labels:
    app: db-config
data:
  {{ .Values.DB_TYPE }}.conf: |
{{- if eq .Values.DB_TYPE "mysql" }}
{{- include "configMapOfMysql" . |indent 4 }}
{{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.DB_TYPE }}
  labels:
    app: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        deployPolicy: standalone
    spec:
{{- if not .Values.RUN_SINGLE_NODE }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      containers:
      - name: database
        image: {{ .Values.REGISTRY }}tpcc-{{ .Values.DB_TYPE }}{{ .Values.RELEASE }}
        imagePullPolicy: {{ include "imagepolicy" .Values }}
        lifecycle:
          preStop:
            exec:
              command: [ "sh", "-c", "rm -rf {{ .Values.MYSQL_MOUNT_PATH }}/*" ]
        securityContext:
          privileged: true
{{- if eq .Values.DB_TYPE "mysql" }}
        command: [ "sh", "-c", "/prepare_database.sh; /usr/local/bin/docker-entrypoint.sh mysqld" ]
{{- end }}
        ports:
        - containerPort: {{ .Values.DB_PORT }}
        env: 
        - name: DEBUG
          value: "{{ .Values.DEBUG }}"
        - name: DB_TYPE
          value: "{{ .Values.DB_TYPE }}"
        - name: ENABLE_MOUNT_DIR
          value: "{{ .Values.ENABLE_MOUNT_DIR }}"
        - name: DB_MOUNT_DIR
          value: {{ if eq .Values.DB_TYPE "mysql" }}"{{ .Values.MYSQL_MOUNT_PATH }}" {{ end }}
        - name: RUN_SINGLE_NODE
          value: "{{ .Values.RUN_SINGLE_NODE }}"
        - name: ENABLE_SOCKET_BIND
          value: "{{ .Values.ENABLE_SOCKET_BIND }}"
        - name: SOCKET_BIND_NODE
          value: "{{ .Values.SOCKET_BIND_NODE }}"
{{- if .Values.RUN_SINGLE_NODE}}
        - name: SERVER_CORE_NEEDED_FACTOR
          value: "{{ .Values.SERVER_CORE_NEEDED_FACTOR }}"
{{- end }}
        - name: ENABLE_RPSRFS_AFFINITY
          value: "{{ .Values.ENABLE_RPSRFS_AFFINITY }}"
        - name: RPS_SOCK_FLOW_ENTRIES
          value: "{{ .Values.RPS_SOCK_FLOW_ENTRIES }}"
        - name: ENABLE_IRQ_AFFINITY
          value: "{{ .Values.ENABLE_IRQ_AFFINITY }}"
        - name: EXCLUDE_IRQ_CORES
          value: "{{ .Values.EXCLUDE_IRQ_CORES }}"
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
{{- if eq .Values.DB_TYPE "mysql" }}
        - name: MYSQL_ROOT_PASSWORD
          value: "{{ .Values.MYSQL_ROOT_PASSWORD }}"
        - name: MYSQL_LOG_DIR
          value: "{{ .Values.MYSQL_LOG_DIR }}"
{{- end }}
        volumeMounts:
        - mountPath: /etc/localtime
          name: timezone
          readOnly: true
        - mountPath: {{ if eq .Values.DB_TYPE "mysql" }}{{ .Values.MYSQL_CONFIG_PATH }}{{ end }}
          name: db-config-volume
          subPath: {{ .Values.DB_TYPE }}.conf
          readOnly: false
        - mountPath: /dev/shm
          name: shm-volume
{{- if eq .Values.DB_FS_TYPE "ramfs" }}
        - mountPath: {{ if eq .Values.DB_TYPE "mysql" }}{{ .Values.MYSQL_MOUNT_PATH }}{{ end }}
          name: ramfs
{{- else if .Values.ENABLE_MOUNT_DIR }}
        - mountPath: {{ if eq .Values.DB_TYPE "mysql" }}{{ .Values.MYSQL_MOUNT_PATH }}{{ end }}
          name: hostfs
{{- end }}
{{- if eq .Values.DB_HUGEPAGE_STATUS "on" }}
        - mountPath: /hugepages-2Mi
          name: hugepage-2mi
{{- end }}
        resources:
          limits:
            cpu: {{ .Values.DB_CPU_LIMIT }}
{{- if eq .Values.DB_HUGEPAGE_STATUS "on" }}
            hugepages-2Mi: {{ .Values.DB_HUGEPAGES_2MI }}
{{- end }}
          requests:
            cpu: {{ .Values.DB_CPU_REQUEST }}
{{- if eq .Values.DB_HUGEPAGE_STATUS "on" }}
            hugepages-2Mi: {{ .Values.DB_HUGEPAGES_2MI }}
{{- end }}
      volumes:
      - name: timezone
        hostPath:
          path: /etc/localtime
          type: File
      - name: db-config-volume
        configMap:
          name: db-config
      - name: shm-volume
        emptyDir:
          medium: Memory
{{- if eq .Values.DB_FS_TYPE "ramfs" }}
      - name: ramfs
        emptyDir:
          medium: Memory
{{- else if .Values.ENABLE_MOUNT_DIR }}
      - name: hostfs
        hostPath:
          path: {{ .Values.MOUNT_DIR }}
          type: Directory
{{- end }}
{{- if eq .Values.DB_HUGEPAGE_STATUS "on" }}
      - name: hugepage-2mi
        emptyDir:
          medium: HugePages-2Mi
{{- end }}
      nodeSelector:
{{- if eq .Values.DB_HUGEPAGE_STATUS "on" }}
        HAS-SETUP-HUGEPAGE-2048kB-{{ .Values.DB_HUGEPAGES }}: "yes"
{{- end }}
{{- if .Values.ENABLE_MOUNT_DIR }}
        HAS-SETUP-DISK-MOUNT-1: "yes"
{{- end }}
{{- if not .Values.RUN_SINGLE_NODE }}
      {{- $args := dict "key" "HAS-SETUP-DISK-MOUNT-1" "operator" "In" "value" "yes" }}
      {{- include "nodeAffinity" $args }}
{{- end }}

user root;
daemon on;
worker_processes 120;
#master_process off;
worker_cpu_affinity auto;
#worker_rlimit_nofile 65535;
error_log error.log warn;
events {
    worker_connections 65535;
    use epoll;
#    io_uring_entries 32768;
#    io_uring_register_file on;   
#    accept_mutex       on;
#    multi_accept       off;
}

thread_pool dlb threads=16 max_queue=65535;

http {
#    include /home/cdn/dlb/nginx/etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log off;
    error_log off;
    aio threads=dlb;
##    aio_write on;
##    read_ahead 0;
##    tcp_nopush on;
##    tcp_nodelay off;

#    sendfile on;
     directio 4k;
     directio_alignment 512;

#    # Cache Configurations
     proxy_cache_path /cdn/cache1 levels=2 keys_zone=nginx-cache1:400m max_size=3000g inactive=4d use_temp_path=off;
     proxy_cache_path /cdn/cache2 levels=2 keys_zone=nginx-cache2:400m max_size=3000g inactive=4d use_temp_path=off;
     proxy_cache_path /cdn/cache3 levels=2 keys_zone=nginx-cache3:400m max_size=3000g inactive=4d use_temp_path=off;
     proxy_cache_path /cdn/cache4 levels=2 keys_zone=nginx-cache4:400m max_size=3000g inactive=4d use_temp_path=off;
     proxy_cache_path /cdn/cache5 levels=2 keys_zone=nginx-cache5:400m max_size=3000g inactive=4d use_temp_path=off;

#    # Map drives

    split_clients $request_uri $ng_cache {
        20% "nginx-cache1";
        20% "nginx-cache2";
        20% "nginx-cache3";
        20% "nginx-cache4";
        20% "nginx-cache5";
    }

    upstream backends_18080 {
	server 192.168.200.1:18080;
        keepalive 40;
    }
    upstream backends_18081 {
	server 192.168.200.1:18081;
        keepalive 40;
    }
    upstream backends {
        server 192.168.200.1:18082;
        keepalive 40;
    }
    
    server {
        listen 8080 reuseport;
        listen [::]:8080 reuseport;
        server_name 192.168.100.1;
        keepalive_timeout 60s;
        access_log off;
        error_log off;
        lingering_close off;
        lingering_time 1;
        location / {
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
#       proxy_cache_key $uri;
        proxy_cache $ng_cache;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_pass http://backends_18080;
        }
    }
    server {
        listen 8081 reuseport;
        listen [::]:8081 reuseport;
        server_name 192.168.100.1;
        keepalive_timeout 60s;
        access_log off;
        error_log off;
        lingering_close off;
        lingering_time 1;
        location / {
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
    #   proxy_cache_key $uri;
        proxy_cache $ng_cache;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_pass http://backends_18081;
        }
   }
    server {
        listen 8082 reuseport;
        listen [::]:8082 reuseport;
#        listen 8443 ssl;
#        listen [::]:8443 ssl;
        server_name 192.168.100.1;
      	keepalive_timeout 60s;
      
#      	ssl_verify_client off;
#      	ssl_session_tickets off;
      
      	access_log off;   
        error_log off;
      	lingering_close off;
      	lingering_time 1;
      
#      	ssl_certificate /home/cdn/certs/server.cert.pem;
#      	ssl_certificate_key /home/cdn/certs/server.key.pem;
#      	ssl_session_timeout 300s;
#      	ssl_protocols TLSv1.2;
#      	ssl_ciphers AES128-SHA:AES256-SHA;
#      	ssl_prefer_server_ciphers on;

#        location /10KB.json{
#	               return 201 '{"status":"success","result":"\
#	location / {
#		return 200;
#	}

        location / {
           expires 30d;
           add_header Pragma public;
#           add_header Cache-Control "public";
           proxy_cache $ng_cache;
           proxy_set_header Host $host;
           proxy_http_version 1.1;
           proxy_set_header Connection "";
           proxy_pass http://backends;
        }
	location /nginx_status {
	 	allow 127.0.0.1;	#only allow requests from localhost
	 	deny all;		#deny all other hosts	
	}
   }
}
